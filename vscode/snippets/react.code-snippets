{
  "react:useEffect:js": {
    "prefix": "react:useEffect",
    "scope": "javascript,javascriptreact",
    "body": ["useEffect(() => {", "\t$0", "}, [$1]);"],
    "description": "React useEffect Hook"
  },
  "react:useEffect:ts": {
    "prefix": "react:useEffect",
    "scope": "typescript,typescriptreact",
    "body": ["React.useEffect(() => {", "\t$0", "}, [$1]);"],
    "description": "React useEffect Hook"
  },
  "react:useEffect:sync:js": {
    "prefix": "react:useEffect:sync",
    "scope": "javascript,javascriptreact",
    "body": [
      "useEffect(() => {",
      "\t(async () => {",
      "\t\tawait doSomefn();",
      "\t})();",
      "\t// eslint-disable-next-line react-hooks/exhaustive-deps",
      "}, [$0]);"
    ],
    "description": "React useEffect Hook"
  },
  "react:useEffect:sync:ts": {
    "prefix": "react:useEffect:sync",
    "scope": "typescript,typescriptreact",
    "body": [
      "React.useEffect(() => {",
      "\t(async () => {",
      "\t\tawait doSomefn();",
      "\t})();",
      "\t// eslint-disable-next-line react-hooks/exhaustive-deps",
      "}, [$0]);"
    ],
    "description": "React useEffect Hook"
  },
  "react:useState:ts": {
    "prefix": "react:useState",
    "scope": "typescript,typescriptreact",
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = React.useState($0);"],
    "description": "React useState hook"
  },
  "react:useBoolean": {
    "prefix": "react:useBoolean",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "const { value: ${1:isBoolean}, setValue: ${2:setBoolean}, setTrue: ${3:setBooleanTrue}, setFalse: ${4:setBooleanFalse}, toggle: ${5:toggleBoolean} } = useBoolean($0);"
    ],
    "description": "React useBoolean() sexy hook"
  }
}
